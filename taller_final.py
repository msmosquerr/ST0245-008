# -*- coding: utf-8 -*-
"""Taller_Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1weg8LIRJburIk4Z2t2vLP88bKVgK9gzS

Punto 1

Si, es posible tener una lista enlazada que almacene elementos diferentes en cada uno de sus nodos, (de hecho, las listas de python tienen esta posibilidad), ya que basta tener los nodos creados con cada uno de los datos y conectarlos con los enlaces correspondientes.
Lo que si pasaría si creamos una lista como esta, es que ya no podriamos hacer uso de muchos metodos que facilitan al momento de trabajar con listas, o al menos se tendria que hacer modificaciones ya que su funcionamiento no seria el mismo para una lista homogenea (especialmente cuando hay solo numeros) que para una lista heterogenea, con diferentes tipos de datos

Punto 2
"""

lista=[2,4,1,6,5,3,2,7]  

def Sumar(lista):
    if (len(lista)==0):
        sum=0
    else:
        sum= lista[0] + Sumar(lista[1:])
    return sum

def promedio(sum,lista):
    prom=sum/(len(lista))
    return prom
lista=[2,4,1,6,5,3,2,7]  
print("El promedio de los valores de la lista es",promedio(Sumar(lista), lista))

#IBAEDLFCHJKMG
#En posorden
3.2

3.3
#Preorden GEAIBMCLDFKJH
#Inorden  IABEGLDCFMKHJ
#Posorden IBAEDLFCHJKMG

class node():
    def __init__(self, dato):
        self.left = None
        self.right = None
        self.dato = dato

class arbol():
    def __init__(self):
        self.root = None
        
    def insert(self, a, dato):
        #modificación para restringir la entrada de datos, no se permiten datos repetidos
        assert self.buscar(dato, a) is None, "El dato ya existe"
        if a == None:
            a = node(dato)
        else:
            d = a.dato
            if dato < d:
                a.left = self.insert(a.left, dato)
            else:
                a.right = self.insert(a.right, dato)
        return a

    def inorder(self, a):
        if a == None:
            return None
        else:
            self.inorder(a.left)
            print(a.dato)
            self.inorder(a.right)

    def preorder(self, a):
        if a == None:
            return None
        else:
            print(a.dato)
            self.preorder(a.left)
            self.preorder(a.right)

    def postorder(self, a):
        if a == None:
            return None
        else:
            self.postorder(a.left)
            self.postorder(a.right)
            print(a.dato)

    def buscar(self, dato, a):
        if a == None:
            return None
        else:
            if dato == a.dato:
                return a.dato
            else:
                if dato < a.dato:
                    return self.buscar(dato, a.left)
                else:
                    return self.buscar(dato, a.right)
    
    def acceder(self, dato, a):
      if a == None:
        return None
      else:
        if a.left is not None:
          if a.left.dato == dato:
            return a
        if a.right is not None:  
          if a.right.dato == dato:
            return a
        if dato < a.dato:
          return self.acceder(dato, a.left)
        else:
          return self.acceder(dato, a.right)
        
    def borrar(self, dato, a):
      if a == None:
        return None
      else:
        raiz = self.acceder(dato, a)
        assert raiz is not None, "La raiz es nula"
        if raiz.left is not None:
          if raiz.left.dato == dato:
            if raiz.left.left is None and raiz.left.right is None:
              raiz.left = None
            elif raiz.left.left is None and raiz.left.right is not None:
              raiz.left = raiz.left.right
            elif raiz.left.left is not None and raiz.left.right is None:
              raiz.left = raiz.left.left
            else:
              if raiz.left.left.dato < raiz.left.right.dato:
                temp = raiz.left.left
                raiz.left = raiz.left.right
                raiz.left.left = temp
        elif raiz.right is not None:
          if raiz.right.dato == dato:
            if raiz.right.left is None and raiz.right.right is None:
              raiz.right = None
            elif raiz.right.left is None and raiz.right.right is not None:
              raiz.right = raiz.right.right
            elif raiz.right.left is not None and raiz.right.right is None:
              raiz.right = raiz.right.left
            else:
              if raiz.right.left.dato > raiz.right.right.dato:
                temp = raiz.right.left
                raiz.right = raiz.right.right
                raiz.right.left = temp
          else:
            pass
          
        
tree = arbol()

def posorden(pre, ino, n):
  prelista = []
  inlista = []
  poslista = []

  if len(pre) > 0:
    for i in pre:
      prelista.append(i)
  if len(ino) > 0:
    for i in ino:
      inlista.append(i)

  if len(pre) == 0 and len(ino) == 0:
    return
  
  actpre = prelista[0]
  actin = inlista[0]

  for i in range(len(inlista)):
    if inlista[i] == actpre:
      actin = i
      break
  
  subinizq = inlista[:actin]
  subpreizq = prelista[1:actin+1]
  subinder = inlista[actin+1:]
  subpreder = prelista[actin+1:]

  print("\t"*(50-n), actpre)
  print("\t"*(50-n), actpre, "Izquierda:")
  posorden(subpreizq, subinizq, n-1)
  print("\t"*(50-n), actpre, "Derecha:")
  posorden(subpreder, subinder, n-1)

posorden("GEAIBMCLDFKJH", "IABEGLDCFMKHJ", 50)

#IBAEDLFCHJKMG
#En posorden
3.2
 
3.3
#Preorden GEAIBMCLDFKJH
#Inorden  IABEGLDCFMKHJ
#Posorden IBAEDLFCHJKMG
 
def posorden(pre, ino):
  prelista = []
  inlista = []
  poslista = []
 
  if len(pre) > 0:
    for i in pre:
      prelista.append(i)
  if len(ino) > 0:
    for i in ino:
      inlista.append(i)
 
  if len(pre) == 0 and len(ino) == 0:
    return
  
  actpre = prelista[0]
  actin = inlista[0]
 
  for i in range(len(inlista)):
    if inlista[i] == actpre:
      actin = i
      break
  
  subinizq = inlista[:actin]
  subpreizq = prelista[1:actin+1]
  subinder = inlista[actin+1:]
  subpreder = prelista[actin+1:]
 
  posorden(subpreizq, subinizq)
  posorden(subpreder, subinder)
  print(actpre, end ="")
 
posorden("GEAIBMCLDFKJH", "IABEGLDCFMKHJ")
#Resultado esperado: IBAEDLFCHJKMG

#PUNTO 4

n=int(input("Ingrese el numero de nuggets a comprar "))
def NumNuggets(n):
   variable = False
   arr = []
   for x in range(n//6+1):
        for y in range(n//9+1):
            for z in range(n//20+1):
                if ((6*x)+(9*y)+(20*z))==n:
                   variable = True
                   arr.append([x,y,z])
   if variable==True:
     i =0
     while i<len(arr):
       print("Puedes comprar",arr[i][0],"de 6,",arr[i][1],"de 9 y",arr[i][2],"de 20")  
       i = i+1
     return ":D"
   else:
     return "No puedes comprar esta cantidad de Nuggets"
print(NumNuggets(n))

"""Punto 5

5.1 O(n)

5.2 O(n)

5.3 O(log(n))

5.4 O(n*log(n))

5.5 O(1)
"""

#Punto 6
class node():
    def __init__(self, dato):
        self.left = None
        self.right = None
        self.dato = dato

class arbol():
    def __init__(self):
        self.root = None
        
    def insert(self, a, dato):
        if a == None:
            a = node(dato)
        else:
            d = a.dato
            if dato < d:
                a.left = self.insert(a.left, dato)
            else:
                a.right = self.insert(a.right, dato)
        return a

    def altura(self, a):
      if a is None:
        return 0
      if a is not None and (a.left is None and a.right is None):
        return 1
      return 1 + max(self.altura(a.left), self.altura(a.right))
      
tree = arbol()
tree.root = node(10)
for i in range(1,10):
  tree.insert(tree.root, i)
for i in range(11,15):
  tree.insert(tree.root, i)
print(tree.altura(tree.root))

#Punto 7 CODIGO ORIGINAL
class Alumno:
    def __init__(self, nombre, edad, nota):
        self.nombre = nombre
        self.edad = edad
        self.nota = nota
    def __str__(self):
       return self.nombre+' - '+str(self.edad)+' años :'+str(self.nota)

class Nodo:
    def __init__(self, datos):
        self.datos = datos
        self.siguiente = None

primero = None
alumno = Alumno('Alex', 30, 8.9)
nodo = Nodo(alumno)
nodo.siguiente = primero
primero = nodo
alumno = Alumno('Pepe', 27, 3.7)
nodo = Nodo(alumno)
nodo.siguiente = primero
primero = nodo
n = primero
while n != None:
 print(n.datos)
 n = n.siguiente

#Punto 7 CODIGO OPTIMIZADO
class Alumno:
    def __init__(self, nombre, edad, nota):
        self.nombre = nombre
        self.edad = edad
        self.nota = nota
    def __str__(self):
       return self.nombre+' - '+str(self.edad)+' años :'+str(self.nota)

class Nodo:
    def __init__(self, datos):
        self.datos = datos
        self.siguiente = None
class Pila:
      def __init__(self):
        self.head=None
        
      def no_vacio(self):
        if self.head == None:
          return True
        else:
          return False

      def apilar(self,data):
        if self.head == None:
            self.head=Nodo(data)
        else:
            nuevo_nodo= Nodo(data)
            nuevo_nodo.next=self.head
            self.head=nuevo_nodo
        aux=self.head
        print(aux.datos," ",end= None)
        
nodo=Pila()
nodo.apilar(Alumno('Alex', 30, 8.9))
nodo.apilar(Alumno('Pepe', 27, 3.7))
nodo.apilar(Alumno('Juan',23,3.5))
nodo.apilar(Alumno('Laura',24,4.5))

"""Punto 7

7.1 La estructura que se utilizó para almacenar los datos de cada estudiante fue una Pila

7.2 Este algoritmo tiene complejidad O(n)

7.3 Puedes ver las modificaciones hechas al código en la parte de arriba

7.4 Con las modificaciones hechas al original, el nuevo código tiene una complejidad de O(1)
"""

#Punto 8 
class Alumno:
   def __init__(self, nombre, edad, programa,gustos):
        self.nombre = nombre
        self.edad = edad
        self.programa= programa
        self.gustos=gustos
   def __str__(self):
        return self.nombre+' - '+str(self.edad)+' años :'+' Estudia ingenieria '+ str(self.programa)+' , '+str(self.gustos)
class Node: 
    # constructor inicializa el nodo automaticamente
    def __init__(self,data): 
        self.data = data 
        self.next = None
class Pila:
    def __init__(self):
        self.head= None #Crear cabeza
    
    def no_vacio(self):
        if self.head == None:
            return True
        else:
            return False
    def apilar(self,data):
        if self.head == None:
            self.head=Node(data)
        else:
            nuevo_nodo= Node(data)
            nuevo_nodo.next=self.head #Enlazarlo con la cabeza
            self.head=nuevo_nodo #La cabeza pasa a ser el nuevo nodo
    def Imprimir(self):
        #Imprimir la pila
        aux=self.head
        if self.no_vacio():
            print(" ")
        else:
          while (aux != None):
            print(aux.data," ",end= None)
            aux=aux.next
        return aux
nodo = Pila()
nodo.apilar(Alumno('Daniel Garcia Salcedo',18,'de ¿Sistemas?','Le gustan los video juegos, el freestyle, la música,la comida y ver series'))
nodo.apilar(Alumno('Daniel Gonzales Bernal',29,'de Sistemas','Le gustan las series, el anime, cocinar,las motos, viajar y tomar fotos turísticas'))
nodo.apilar(Alumno('Diego Velásquez Varela',17,'Matemática','Le gusta el Rock, música acústica, toca la guitarra, le gusta Naruto'))
nodo.apilar(Alumno('Harold Steven González','No sabemos sus ','Matemática','Le divierten las matemáticas, toca el trombón, le gusta leer, los doritos y ver películas'))
nodo.apilar(Alumno('Jayder Ochoa Carvajal','No sabemos sus','de ¿Sistemas?','Le gusta el anime, dibuja muy bien, es colaborador y trata de dar lo mejor de si mismo'))
nodo.apilar(Alumno('Juan Felipe Agudelo Velez',17,'Matemática','Le gusta la música, toca la guitarra,la matemática, la carrera espacial y la cazuela paisa'))
nodo.apilar(Alumno('Juan Felipe Martinez Bedoya',20,'Sistemas y mecánica','Le gusta leer, ver series y peliculas, videojuegos, los deportes, la robótica y los perros'))
nodo.apilar(Alumno('Juan Manuel Muñoz Arias','Desconocida','de Sistemas','Le gusta jugar, la música, estudiar'))
nodo.apilar(Alumno('Donován Castrillón Franco',18,' de Sistemas','Le gusta el anime, los videojuegos,el baloncesto, los gatos,trasnochar, comer cosas nuevas, y la música'))
nodo.apilar(Alumno('Jose Miguel Blanco Velez',17,'de Sistemas','Le gusta la música en especial el trap, y los videojuegos'))
nodo.apilar(Alumno('Jose Manuel Ramirez',17,'Matemática','Le gusta el anime, la matemática pura, física teórica, la música, ha compuesto electronica ¡Escribánle! Para info'))
nodo.apilar(Alumno('Myllee Sarleth Mosqeuera Rivas',17,'Matemática','Le gusta la música, bailar,dibujar, leer y las matemáticas'))
nodo.apilar(Alumno('Daniel Andres Hernández Olaya',17,'de Sistemas','Le gusta el deporte, los videojuegos, probar comida nueva, y la música'))
nodo.apilar(Alumno('Julian Andres Mazo',17,'de ¿Sistemas?','Le gusta la música, toca la guitarra acústica y electrica, los videojuegos, dibujar, y leer libros filosóficos'))
nodo.apilar(Alumno('Santiago Parra Mejía',16,'Matemática','Le gusta la música, toca el piano y quiere aprender técnica vocal, las matemáticas puras y la computación y es un católico apasionado'))
nodo.apilar(Alumno('Salomón Velez Perez',17,'de Sistemas','Le gusta escribir, los videojuegos, el anime y escuchar música'))
nodo.apilar(Alumno('Simón Gómez Arango',17,'de Sistamas','Le gusta el campo y meditar, lo paranormal, la música, ver peliculas y series, monas chinas y los juegos'))
nodo.apilar("ESTOS SON LOS ESTUDIANTES DEL CURSO DE ESTRUCTURAS DE DATOS Y ALGORITMOS, ¡CONOCELOS UN POCO!")
nodo.Imprimir()